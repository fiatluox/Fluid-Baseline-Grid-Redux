/* let's have some fun with grids */

/* golden ratio percentages */
@Phi: 1.61803398874989484820458683436563811772030917980576;

@ga: (1/@Phi);
@gb: (1 - (1/@Phi));

@goldenA: percentage(1/@Phi);
@goldenB: percentage(1 - (1/@Phi));

/* GOLDEN RATIO GRID - for fluid layouts */

@baseMargin: 2%;
@totalMargin: (@baseMargin * 2);

.g1,.g2,.g3 {display:inline; float: left; margin-left: @baseMargin; margin-right: @baseMargin; }

.g1 {width: (@goldenA - @totalMargin); }
.g2 {width: (@goldenB - @totalMargin) }
/* full width - gutter */
.g3 {width: (100% - @totalMargin ) }

/* for sub-layouts without nesting divs */
.gnest(@parent: 1, @child: 1)
{
	display:inline; 
	float: left; 
	width: (percentage(@parent * @child) - @totalMargin);
	margin-left: @baseMargin; 
	margin-right: @baseMargin; 
}

/* fixed width layout grids */

/* base column width without margin or padding */
@basecol: 4.5;

/* FIBONACCI SEQUENCE BASED GRID */

/* measurements in EMs
@n = nth number in sequence
@m = margin on each side
@p = padding on each side (defaults to none)
@b = base column width
*/

.fib (@n: 3, @m:0.75, @p:0, @b: 4.5) {
    
	@col:`(Math.round(Math.pow(@{Phi},@{n})/Math.sqrt(5)) * @{b}) - (2* (@{m} + @{p}))`;

    display:inline; 
    float: left; 
    width: ~`"@{col}rem"`;
    margin-left: ~`"@{m}rem"`;
    margin-right: ~`"@{m}rem"`;
    padding: ~`"@{p}rem"`;

}
/* allow columns to stack vertically without floating */
.fib-unfloat (@n: 3, @m:0.75, @b: 4.5) {
    
	@ml:`(Math.round(Math.pow(@{Phi},@{n})/Math.sqrt(5)) * @{b}) + @{m}`;
	
    display:block; 
    float: none; 
    margin-left: ~`"@{ml}rem"`;

}


/* GENERIC COLUMN GENERATOR */
/* measurements in ems
@cols = column span
@b = base column width
@m = margin on each side
@p = padding on each side 
*/

.col (@cols: 1, @m: .75, @p: 0, @b: 4.5)
{
    @colw: (@cols * @b) - (2* (@m + @p));

    display:inline; 
    float: left; 
    width: unit(@colw, em);
    margin-left: unit(@m, em);
    margin-right: unit(@m, em);
    padding: unit(@p, em);
	
}
